{"version":3,"sources":["FetchApi.js","ListCard.js","MapContent.js","universities.js","App.js","sw.js","index.js"],"names":["getUniversityDetailById","universityId","fetch","concat","then","res","json","data","meta","code","status","content","response","venue","catch","e","ListCard","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","updateQuery","newQuery","setState","query","onUpdateShowingPlaces","hideListCard","event","showListCard","state","clickItem","onSelectPlace","target","dataset","id","updateIsShow","mapWidth","_this2","_this$props","showingPlaces","selectedPlace","react_default","a","createElement","className","onClick","type","placeholder","value","onChange","map","place","key","data-id","name","React","Component","MapContent","_React$Component","updateShowingPlaces","newShowingPlaces","match","RegExp","escapeRegExp","allUniversities","filter","test","includes","selectPlace","forEach","FetchApi","venueData","unSelectPlace","onMarkerClick","marker","onCloseInfoWindow","bind","assertThisInitialized","inherits","createClass","infoContent","_this$state","width","size","href","canonicalUrl","dist","google","zoom","initialCenter","center","mapTypeControl","position","pos","ListCard_ListCard","visible","onClose","defaultProps","lat","lng","sizeMe","GoogleApiWrapper","apiKey","universitiesInQingDao","App","src_MapContent","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","error","ReactDOM","render","src_App","document","getElementById","URL","process","origin","addEventListener","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWork"],"mappings":"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","file":"static/js/main.9b0b8751.chunk.js","sourcesContent":["const api = \"https://api.foursquare.com/v2/venues/\";\nconst clientId = \"OP2DMM25VI5LYWWYPTBK1IZUEICXH3KLIH1DGY4BWM0LHDYQ\";\nconst clientSecret = \"Z4FBTHDAAMZ21ZFS5QDE2NUWT52WOIPBWMKJ3TBHBYMU54QY\";\n\nexport const getUniversityDetailById = universityId =>\n  fetch(\n    `${api}${universityId}?&v=20190218&client_id=${clientId}&client_secret=${clientSecret}`\n  )\n    .then(res => res.json())\n    .then(data => {\n      if (data.meta.code === 200) {\n        let newData = { status: \"success\", content: data.response.venue };\n        return newData;\n      } else {\n        return {\n          status: \"error\",\n          content: data.meta.code\n        };\n      }\n    })\n    .catch(e => {\n      return e;\n    });\n","import React from \"react\";\n\nexport default class ListCard extends React.Component {\n\n  constructor(props){\n    super(props);\n    this.state = {\n      query: \"\",\n      showListCard: true\n    };\n  }\n\n  componentDidMount() {\n    this.updateIsShow();\n  }\n\n  updateIsShow () {\n    if (this.props.mapWidth < 750) {\n      this.setState({ showListCard: false });\n    }\n  }\n\n  updateQuery = newQuery => {\n    this.setState({ query: newQuery });\n    this.props.onUpdateShowingPlaces(newQuery);\n  };\n\n  hideListCard = event => {\n    this.setState({ showListCard: !this.state.showListCard });\n  }\n\n  clickItem = event => {\n    this.props.onSelectPlace(event.target.dataset.id);\n    this.hideListCard();\n  };\n\n  render() {\n    const { showingPlaces, selectedPlace } = this.props;\n    const { query } = this.state;\n\n    return (\n      <div\n        className=\"card border-secondary\"\n        id=\"item-list\">\n\n        <div className=\"card-header\">\n          <button className=\"btn btn-info\"\n            onClick={this.hideListCard}>{this.state.showListCard ? \"▼\" : \"▲\"}</button>\n          <h5>Universities in QingDao</h5>\n        </div>\n        <div\n          className={this.state.showListCard ? \"card-body\" : \"hidden\"}\n          >\n          <input\n            type=\"text\"\n            className=\"form-control\"\n            placeholder=\"查询\"\n            value={query}\n            onChange={event => this.updateQuery(event.target.value)}\n          />\n        </div>\n        <ul className={this.state.showListCard ? \"list-group list-group-flush\" : \"hidden\"}>\n          {showingPlaces.map(place => (\n            <li key={place.universityId}>\n              <button\n                className={\n                  place.universityId === selectedPlace.universityId\n                    ? \"list-group-item active\"\n                    : \"list-group-item\"\n                }\n                data-id={place.universityId}\n                onClick={this.clickItem}>{place.name}</button>\n            </li>\n          ))}\n        </ul>\n\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport * as FetchApi from \"./FetchApi\";\nimport PropTypes from 'prop-types';\nimport { Map, InfoWindow, Marker, GoogleApiWrapper } from \"google-maps-react\";\nimport escapeRegExp from \"escape-string-regexp\";\nimport sizeMe from 'react-sizeme';\nimport ListCard from \"./ListCard\";\n\nexport class MapContent extends React.Component {\n  static defaultProps = {\n    center: {\n      lat: 36.100461,\n      lng: 120.436026\n    },\n    zoom: 10\n  };\n\n  static propTypes = {\n      allUniversities: PropTypes.array.isRequired\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      showingPlaces: [],\n      selectedPlace: {},\n      venueData: {},\n      mapWidth: {}\n    };\n\n    this.updateShowingPlaces = this.updateShowingPlaces.bind(this);\n    this.selectPlace = this.selectPlace.bind(this);\n    this.unSelectPlace = this.unSelectPlace.bind(this);\n    this.onMarkerClick = this.onMarkerClick.bind(this);\n    this.onCloseInfoWindow = this.onCloseInfoWindow.bind(this);\n  }\n\n  componentDidMount() {\n    this.updateShowingPlaces(\"\");\n  }\n\n  updateShowingPlaces = query => {\n    let newShowingPlaces = this.state.showingPlaces;\n    if (query) {\n      const match = new RegExp(escapeRegExp(query), \"i\");\n      newShowingPlaces = this.props.allUniversities.filter(place =>\n        match.test(place.name)\n      );\n    } else {\n      newShowingPlaces = this.props.allUniversities;\n    }\n\n    if (!newShowingPlaces.includes(this.state.selectedPlace)) {\n      this.setState({ selectedPlace: {} });\n    }\n\n    this.setState({ showingPlaces: newShowingPlaces });\n  };\n\n  selectPlace = universityId => {\n    this.state.showingPlaces.forEach(place => {\n      if (place.universityId === universityId) {\n        this.setState({\n          selectedPlace: place\n        });\n      }\n    });\n\n    FetchApi.getUniversityDetailById(universityId).then(data => {\n      this.setState({ venueData: data });\n    });\n  };\n\n  unSelectPlace = () => {\n    this.setState({ selectedPlace: {}, venueData: {} });\n  };\n\n  onMarkerClick = (props, marker, e) => {\n    this.selectPlace(props.id);\n  };\n\n  onCloseInfoWindow = () => {\n    this.unSelectPlace();\n  };\n\n  render() {\n    const { showingPlaces, selectedPlace, venueData } = this.state;\n\n    const { width } = this.props.size;\n\n    var infoContent;\n\n    if (!venueData) {\n      infoContent = (<div>\n        <h6>正在加载</h6>\n      </div>)\n    }\n    else if (venueData.status === \"success\") {\n      infoContent = (<div>\n        <h5>\n          <a href={venueData.content.canonicalUrl}>{venueData.content.name}</a>\n        </h5>\n        <h5>{selectedPlace.name}</h5>\n      </div>)\n    }\n    else if (venueData.status === \"error\") {\n      infoContent = (<div>\n        <h5>错误码 {venueData.content}</h5>\n        <h6>没后找到任何内容!</h6>\n      </div>)\n    }\n\n\n    return (\n      <Map\n        google={this.props.google}\n        zoom={this.props.zoom}\n        initialCenter={this.props.center}\n        mapTypeControl={false}\n      >\n        {showingPlaces.map(place => {\n          let marker = (\n            <Marker\n              key={place.universityId}\n              id={place.universityId}\n              name={place.name}\n              onClick={this.onMarkerClick}\n              position={place.pos}\n            />\n          );\n\n          return marker;\n        })}\n        <ListCard\n          showingPlaces={this.state.showingPlaces}\n          selectedPlace={this.state.selectedPlace}\n          onUpdateShowingPlaces={this.updateShowingPlaces}\n          onSelectPlace={this.selectPlace}\n          mapWidth={width}\n        />\n\n        <InfoWindow\n          position={\n            selectedPlace.pos\n          }\n          visible={selectedPlace ? true : false}\n          onClose={this.onCloseInfoWindow}\n        >\n          {infoContent}\n        </InfoWindow>\n      </Map>\n    );\n  }\n}\n\nexport default sizeMe()(GoogleApiWrapper({\n  apiKey: \"AIzaSyCacmIGcWsolGnXLp71cBM_My9axyprocM\"\n})(MapContent));\n","const universitiesInQingDao = [\n    {\n        name: \"QUST(青岛科技大学)\",\n        pos: {\n            lat: 36.126442,\n            lng: 120.487295\n        },\n        universityId: \"58b6b4fb6431e5261489f826\"\n    },\n    {\n        name: \"QDU(青岛大学)\",\n        pos: {\n            lat: 36.076293,\n            lng: 120.424278\n        },\n        universityId: \"4b92350ef964a5205aec33e3\"\n    },\n    {\n        name: \"QTU(青岛理工大学)\",\n        pos: {\n            lat: 36.107448,\n            lng: 120.377628\n        },\n        universityId: \"4ef6dbde775b54cdb40b1df1\"\n    },\n    {\n        name: \"QAU(青岛农业大学)\",\n        pos: {\n            lat: 36.327029,\n            lng: 120.404108\n        },\n        universityId: \"57f33d01498e474776f6ca72\"\n    },\n    {\n        name: \"OUC(中国海洋大学)\",\n        pos: {\n            lat: 36.167816,\n            lng: 120.505352\n        },\n        universityId: \"4c9f56902fb1a14360aff240\"\n    },\n    {\n        name: \"UPC(中国石油大学)\",\n        pos: {\n            lat: 35.947633,\n            lng: 120.18217\n        },\n        universityId: \"4d9d463f7958f04d67eb12fa\"\n    }\n];\n\nexport default universitiesInQingDao;","import React, { Component } from \"react\";\nimport MapContent from \"./MapContent\";\nimport universitiesInQingDao from './universities';\n\nimport \"./css/style.css\";\nimport \"./css/bootstrap.css\";\n\nclass App extends Component {\n\n  render() {\n    return (\n      <div className=\"App\">\n        <MapContent\n          allUniversities={universitiesInQingDao}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Lets check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl);\n            } else {\n                // Is not local host. Just register service worker\n                registerValidSW(swUrl);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the old content will have been purged and\n                            // the fresh content will have been added to the cache.\n                            // It's the perfect time to display a \"New content is\n                            // available; please refresh.\" message in your web app.\n                            console.log('New content is available; please refresh.');\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            if (\n                response.status === 404 ||\n                response.headers.get('content-type').indexOf('javascript') === -1\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport serviceWork from './sw';\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n);\n\nserviceWork();\n"],"sourceRoot":""}